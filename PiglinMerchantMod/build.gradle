plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

// Forgeâ€™s Semantic Versioning structure
// MCVERSION.MAJORMOD.MAJORAPI.MINOR.PATCH
version = '1.19.3-0.0.1'
group = 'net.warrentode.piglinmerchantmod'
archivesBaseName = 'piglinmerchantmod'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

minecraft {
    mappings channel: 'parchment', version: '1.19.2-2022.11.27-1.19.3'
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'todepiglins'
            property 'geckolib.disable_examples', 'true'
            mods {
                todepiglins {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'todepiglins'
            property 'geckolib.disable_examples', 'true'
            mods {
                todepiglins {
                    source sourceSets.main
                }
            }
        }
        gameTestServer {
            //noinspection GroovyAssignabilityCheck
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'todepiglins'
            property 'geckolib.disable_examples', 'true'
            mods {
                todepiglins {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'geckolib.disable_examples', 'true'
            args '--mod', 'todepiglins', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                todepiglins {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url "https://cursemaven.com"
    }
    maven {
        url "https://dl.cloudsmith.io/public/tslat/sbl/maven/"
    }
    maven {
        url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.19.3-44.1.23'
    implementation fg.deobf("net.tslat.smartbrainlib:SmartBrainLib-forge-1.19.3:1.9")
    implementation fg.deobf('software.bernie.geckolib:geckolib-forge-1.19.3:4.0.6')
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "todepiglins",
                "Specification-Vendor"    : "WarrenTode",
                "Specification-Version"   : project.jar.archiveVersion,
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "WarrenTode",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'com.github.warrentode'
            artifactId = 'piglinmerchant'
            version = '1.19.3-0.0.1'

            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}